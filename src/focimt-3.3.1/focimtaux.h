//-----------------------------------------------------------------------------
// Source: focimtaux.h
// Module: focimt
// Auxiliary function.
//
// Copyright (c) 2013-2015, Grzegorz Kwiatek.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------
#ifndef FOCIMTAUX_H_
#define FOCIMTAUX_H_
//-----------------------------------------------------------------------------
#include "moment_tensor.h"
#include "faultsolution.h"
#include "inputdata.h"
#include "getopts.h"

extern bool DrawStations;
extern bool DrawAxes;
extern bool DrawCross;
extern bool DrawDC;
extern bool WulffProjection;
extern bool LowerHemisphere;
extern Taquart::TCColor NFColor;
extern Taquart::TCColor SSColor;
extern Taquart::TCColor TFColor;
extern Taquart::TCColor DCColor;
extern Taquart::TCColor TShadingColor;
extern Taquart::TCColor PShadingColor;
extern Taquart::TCColor StationPlusColor;
extern Taquart::TCColor StationMinusColor;
extern Taquart::TCColor StationTextColor;

//-----------------------------------------------------------------------------
bool ColorSelection(Taquart::String Input, unsigned int i);
bool MTInversion(Taquart::NormType ANormType, int QualityType,
    Taquart::SMTInputData &InputData, int channel, char type,
    std::vector<Taquart::FaultSolutions> &FSList);
double rand_normal(double mean, double stddev);
void Dispatch2(Taquart::String &Input, double &v1, double &v2);
void SetFaultSolution(Taquart::FaultSolution &fu, double M11, double M12,
    double M13, double M22, double M23, double M33, double strike, double dip,
    double rake);
unsigned int CountSlash(Taquart::String Input);
void String2MT(Taquart::String &FaultString, double &M11, double &M12,
    double &M13, double &M22, double &M23, double &M33);
void GenerateBallCairo(Taquart::TriCairo_Meca &Meca,
    std::vector<Taquart::FaultSolutions> &FSList,
    Taquart::SMTInputData &InputData, Taquart::String Type);
void String2SDR(Taquart::String &Input, double &strike, double &dip,
    double &rake);
bool Dispatch(Taquart::String &Input, Taquart::String &Chunk,
    Taquart::String delimiter);
void DrawFaults(Taquart::String FaultString, Taquart::String FilenameOut,
    unsigned int Size);
void DrawFault(Taquart::String FaultString, Taquart::String FilenameOut,
    unsigned int Size);
void PrepareHelp(Options &listOpts);
void DispatchFaults(Taquart::String &FaultString,
    std::vector<Taquart::FaultSolutions> &FSList, bool onefault);
void DispatchStations(Taquart::String &StationString,
    Taquart::SMTInputData &InputData);
void PlotStations(Taquart::String FaultString, Taquart::String FilenameOut,
    unsigned int Size);
void DrawFaultsStations(Taquart::String FaultString,
    Taquart::String StationString, Taquart::String FilenameOut,
    unsigned int Size);
void SplitFilename(Taquart::String& str2, Taquart::String &file,
    Taquart::String &path);

//-----------------------------------------------------------------------------
#endif /* FOCIMTAUX_H_ */
